#!/usr/bin/env python

import sys
import os
import pwd
import time
from Pegasus.DAX3 import *
from datetime import datetime
from argparse import ArgumentParser

class wrf_workflow(object):
    def __init__(self, outdir, nc_fn):
        self.outdir = outdir
        self.nc_fn = nc_fn

    def generate_dax(self):
        "Generate a workflow"
        ts = datetime.utcnow().strftime('%Y%m%dT%H%M%SZ')
        dax = ADAG("casa_wrf_wf-%s" % ts)
        dax.metadata("name", "CASA WRF")

        for f in self.nc_fn:
            f = f.split("/")[-1]
            if f.endswith(".gz"):
                qpefilename = f[:-3]
                unzip = Job("gunzip")
                unzip.addArguments(f)
                zipfile = File(f)
                unzip.uses(zipfile, link=Link.INPUT)
                unzip.uses(qpefilename, link=Link.OUTPUT, transfer=False, register=False)
                dax.addJob(unzip)
            else:
                qpefilename = f;

            string_end = self.nc_fn[-1].find("-")
            file_time = self.nc_fn[-1][string_end+1:string_end+16]
            file_ymd = file_time[0:8]
            file_hms = file_time[9:15]
            file_hm = file_time[9:13]
            #print file_ymd
            #print file_hms
                
            qpefile = File(qpefilename)
            
            wrf_outputfilename = file_ymd + file_hm + "." + CHRTOUT_DOMAIN1;
            wrf_outputfile = File(wrf_outputfilename);
            
            wrf_job = Job("wrf_hydro")
                netcdf2png_job_2.addArguments("-p", "-39.7,-39.7,0:-39.7,+39.7,0:+39.7,-39.7,0", "-t", "ref", "-c", netcdf2png_colorscale_ref_filename, "-q", "245", "-o", netcdf2png_output_ref_filename)
                netcdf2png_job_2.addArguments(qpefilename)
                netcdf2png_job_2.uses(netcdf2png_colorscale_ref_file, link=Link.INPUT)
                netcdf2png_job_2.uses(qpefile, link=Link.INPUT)
                netcdf2png_job_2.uses(netcdf2png_output_ref_file, link=Link.OUTPUT, transfer=True, register=False)
                dax.addJob(netcdf2png_job_2)

                hydroclass_cfradialfilename = radarloc + "-" + file_ymd + "-" + file_hms + ".hc.netcdf.cfradial"
                hydroclass_cfradialfile = File(hydroclass_cfradialfilename)
                hydroclass_outputfilename = radarloc + "-" + file_ymd + "-" + file_hms + ".hc.netcdf"
                hydroclass_outputfile = File(hydroclass_outputfilename)
                
                hydroclass_job = Job("hydroclass")
                hydroclass_job.addArguments(qpefilename)
                hydroclass_job.addArguments("-c", radarconfigfilename, "-o", hydroclass_outputfilename, "-t", "1", "-m", "VHS", "-d", "/opt/hydroclass/membership_functions/", "-s", soundingfilename)
                hydroclass_job.uses(qpefile, link=Link.INPUT)
                hydroclass_job.uses(radarconfigfile, link=Link.INPUT)
                hydroclass_job.uses(hydroclass_outputfile, link=Link.OUTPUT, transfer=False, register=False)
                hydroclass_job.uses(soundingfile, link=Link.INPUT)
                hydroclass_job.uses(hydroclass_cfradialfile, link=Link.OUTPUT, transfer=False, register=False)
                #hydroclass_job.profile("pegasus", "label", "label")
                dax.addJob(hydroclass_job)

                hydro_grid_job = Job("Radx2Grid")
                hydro_grid_job.addArguments("-v", "-params", radx_configfilename, "-f", hydroclass_cfradialfilename, "-outdir", "./", "-outname", hydroclass_outputcartfilename)
                hydro_grid_job.uses(radx_configfile, link=Link.INPUT)
                hydro_grid_job.uses(hydroclass_cfradialfile, link=Link.INPUT)
                hydro_grid_job.uses(hydroclass_outputcartfile, link=Link.OUTPUT, transfer=True, register=False)
                dax.addJob(hydro_grid_job)

                netcdf2png_colorscalefilename = "standard_hmc_single.png"
                netcdf2png_colorscalefile = File(netcdf2png_colorscalefilename)
                netcdf2png_outputfilename = radarloc + "-" + file_ymd + "-" + file_hms + "-hmc.png"
                netcdf2png_outputfile = File(netcdf2png_outputfilename)
                
                netcdf2png_job = Job("netcdf2png")
                netcdf2png_job.addArguments("-p", "-39.7,-39.7,0:-39.7,+39.7,0:+39.7,-39.7,0", "-t", "hmc", "-c", netcdf2png_colorscalefilename, "-q", "245", "-o", netcdf2png_outputfilename)
                netcdf2png_job.addArguments(hydroclass_outputfilename)
                netcdf2png_job.uses(netcdf2png_colorscalefile, link=Link.INPUT)
                netcdf2png_job.uses(hydroclass_outputfile, link=Link.INPUT)
                netcdf2png_job.uses(netcdf2png_outputfile, link=Link.OUTPUT, transfer=True, register=False)
                dax.addJob(netcdf2png_job)

        # Write the DAX file
        daxfile = os.path.join(self.outdir, dax.name+".dax")
        dax.writeXMLFile(daxfile)
        print daxfile

    def generate_workflow(self):
        # Generate dax
        self.generate_dax()
        
if __name__ == '__main__':
    parser = ArgumentParser(description="Single Hail Workflow")
    parser.add_argument("-f", "--files", metavar="INPUT_FILE", type=str, nargs="+", help="Filename", required=True)
    parser.add_argument("-o", "--outdir", metavar="OUTPUT_LOCATION", type=str, help="DAX Directory", required=True)

    args = parser.parse_args()
    outdir = os.path.abspath(args.outdir)
    
    if not os.path.isdir(args.outdir):
        os.makedirs(outdir)

    workflow = single_hail_workflow(outdir, args.files)
    workflow.generate_workflow()
